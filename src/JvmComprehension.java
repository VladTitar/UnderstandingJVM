// Классы в JVM загружаются с помощью класслоадеров. Класслоадеры загружают классы в метаспейс, после чего JVM создает соответствующие объекты и массивы в хипе.

// В JVM есть несколько областей памяти: стэк, хип и метаспейс. Стэк используется для хранения локальных переменных методов и ссылок на объекты.
// Каждый поток исполнения имеет свой собственный стэк. Хип используется для хранения объектов и массивов. Метаспейс используется для хранения метаданных о загруженных классах.
//
//  Сборщик мусора в JVM отслеживает объекты, которые больше не используются в приложении, и освобождает память, занимаемую этими объектами в хипе.
public class JvmComprehension {

    public static void main(String[] args) {
        int i = 1;                      // 1. создается переменная i типа int со значением 1. В этот момент переменная i сохраняется в стэке метода main (или точнее в его фрейме).
        Object o = new Object();        // 2. создается новый объект Object в хипе. Переменная o получает ссылку на этот объект. Также в этот момент выполняется вызов конструктора класса Object, что создает новый фрейм в стэке для этого вызова.
        Integer ii = 2;                 // 3. создается объект типа Integer со значением 2. Переменная ii получает ссылку на этот объект. Этот объект создается в хипе.
        printAll(o, i, ii);             // 4. вызывается метод printAll с аргументами o, i и ii. В этот момент создается новый фрейм стэка для метода printAll, а значения аргументов копируются в его фрейм.
        System.out.println("finished"); // 7. строка "finished" печатается в консоль. В этот момент создается новый фрейм стэка для метода println, в котором сохраняется строка "finished".
    }

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;                   // 5. создается объект типа Integer со значением 700. Переменная uselessVar получает ссылку на этот объект. Этот объект создается в хипе внутри фрейма метода printAll.
        System.out.println(o.toString() + i + ii);  // 6. выполняется метод toString() объекта o, результат которого конкатенируется со значениями переменных i и ii. Затем результат печатается в консоль. В этот момент создается новый фрейм стэка для метода println, в котором сохраняется результат конкатенации.
    }
}